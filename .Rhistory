plot(mtcars$am,
resid3,
panel = panel.smooth,
col = "purple",
bg = "light blue",
pch = 21,
ylab="Residuals",
xlab="Automatic(0)/Manual(1) Transmission",
main="Residual Plot for mpg as a function of AM and other covariates"
)
abline(0, 0)
coplot(mpg ~ factor(am) | as.factor(carb) + as.factor(vs),
data = mtcars,
panel = panel.smooth,
col = "purple",
bg = "light blue",
pch = 21,
bar.bg = c(fac = "light blue"),
rows = 1)
plot(mtcars$am,
resid3,
panel = panel.smooth,
col = "purple",
bg = "light blue",
pch = 21,
ylab="Residuals",
xlab="Automatic(0)/Manual(1) Transmission",
main="Residual Plot for mpg as a function of AM and other covariates"
)
abline(0, 0)
plot(mtcars$am,
resid3,
col = "purple",
bg = "light blue",
pch = 21,
ylab="Residuals",
xlab="Automatic(0)/Manual(1) Transmission",
main="Residual Plot for mpg as a function of AM and other covariates"
)
abline(0, 0)
plot(fit3)
plot(fit3,fit5)
plot(fit5)
plot(mtcars$carb,
resid3,
col = "dark green",
bg = "green",
pch = 25,
ylab="Residuals",
xlab="# of carbutetors",
main="Residual Plot for mpg as a function of Number of Carburetors"
)
abline(0, 0)
plot(mtcars$carb,
resid3,
col = "dark blue",
bg = "dark blue",
pch = 25,
ylab="Residuals",
xlab="# of carbutetors",
main="Residual Plot for mpg as a function of Number of Carburetors"
)
abline(0, 0)
plot(mtcars$carb,
resid3,
col = "dark blue",
bg = "dark blue",
pch = 21,
ylab="Residuals",
xlab="# of carbutetors",
main="Residual Plot for mpg as a function of Number of Carburetors"
)
abline(0, 0)
plot(mtcars$vs,
resid3,
col = "orange",
bg = "orange",
pch = 21,
ylab="Residuals",
xlab="V Engine(0) or Straight Engine(1)",
main="Residual Plot for mpg as a function of V-Engine(0) or S-Engine(1)"
)
abline(0, 0)
plot(mtcars$carb,
resid3,
col = "orange",
bg = "orange",
pch = 20,
ylab="Residuals",
xlab="# of carbutetors",
main="Residual Plot for mpg as a function of Number of Carburetors"
)
abline(0, 0)
plot(mtcars$carb,
resid3,
col = "orange",
bg = "orange",
pch = 21,
ylab="Residuals",
xlab="# of carbutetors",
main="Residual Plot for mpg as a function of Number of Carburetors"
)
abline(0, 0)
par(mfrow=c(2,2))
plot(fit3)
par(mfrow=c(2,2))
plot(fit5)
coplot(mpg ~ factor(am) | as.factor(carb) + as.factor(vs),
data = mtcars,
panel = panel.smooth,
col = "orange",
bg = "yellow",
pch = 21,
bar.bg = c(fac = "orange"),
rows = 1)
par(mfrow=c(2,2))
plot(mtcars$am,
resid3,
col = "purple",
bg = "purple",
pch = 21,
ylab="Residuals",
xlab="Automatic(0)/Manual(1) Transmission",
main="Residual Plot for mpg as a function of AM"
)
abline(0, 0)                  # the horizon
plot(mtcars$carb,
resid3,
col = "orange",
bg = "orange",
pch = 21,
ylab="Residuals",
xlab="# of carbutetors",
main="Residual Plot for mpg as a function of Number of Carburetors"
)
abline(0, 0)
plot(mtcars$vs,
resid3,
col = "orange",
bg = "orange",
pch = 21,
ylab="Residuals",
xlab="V Engine(0) or Straight Engine(1)",
main="Residual Plot for mpg as a function of V-Engine(0) or S-Engine(1)"
)
abline(0, 0)
shapiro.test(fit3$residuals)
coef3
sumf3 <- summary(fit3)
coef3 <- sumf3$coefficients
coef3[,"Pr(>|t|)"]
coef3
require(datasets)
library(datasets)
require(lattice)
library(lattice)
require(car)
library(car)
require(knitr)
library(knitr)
data(mtcars)
# Let us take a brief examination of the mtcars dataset to understand the variables
str(mtcars)
regressors <- names(mtcars)
regressors <- regressors[!regressors %in% c("am","mpg")]
corvec <- sapply(regressors,function(x) cbind(x,cor(mtcars[,x],mtcars$am)))
corvec
names(corvec)
corvec <- sapply(regressors,function(x) data.frame(cbind(x,cor(mtcars[,x],mtcars$am))))
names(corvec)
class(corvec)
corvec
resid3 <- resid(fit3)
resid3
class(resid3)
19.5174 + 6.7980
fit3 <- lm(mpg ~ factor(am)*carb*vs)
summary(fit3)
fit3 <- lm(mpg ~ factor(am)*carb*vs, mtcars)
summary(fit3)
fit3 <- lm(mpg ~ factor(am) + carb + vs, mtcars)
confint(fit3)
coef(fit3)
swirl()
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family="binomial", data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.94, 1)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[, "date"])
as.integer(hits[,"date"])
as.integerhead(hits[,"date"])
as.integer(head(hits[,"date"]))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl))
exp(confint(mdl), "date")
exp(confint(mdl), 2)
exp(confint(mdl, "date"))
which.max(hits[, "visits"])
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl <- glm(visits ~ date, poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits +1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
str(shuttle)
summary(wind)
summary(shuttle)
lodds <- glm(use ~ wind, family="binomial", data=shuttle)
lodds
lodds <- glm(use ~ factor(wind), family="binomial", data=shuttle)
lodds <- glm(use ~ wind, family="binomial", data=shuttle)
summary(lodds)
lodds <- glm(use ~ factor(wind), family="binomial", data=shuttle)
summary(lodds)
lodds <- glm(use ~ wind, family="binomial", data=shuttle)
summary(lodds)
exp(0.03181)
log(1.327)
num <- exp(-0.25131)/(1+exp(-0.25131))
num
den <- exp(-0.25131-0.03181)/(1+exp(-0.25131-0.03181))
den
num/den
den/num
exp(-0.25131)/exp(-0.03181)
exp(-0.25131)
exp(-0.03181)
lodds <- glm(use ~ wind - 1, family="binomial", data=shuttle)
summary(lodds)
exp(-0.25131)/exp(-0.2831)
1/1.0323
-0.25131/-0.2831
exp(-0.25131/-0.2831)
log(0.969)
log(1.327)
num <- exp(-0.25131)/(1+exp(-0.25131))
num
den <- exp(-0.25131-0.03181)/(1+exp(-0.25131-0.03181))
den
num/den
#shuttle1 < shuttle[,wind]
summary(shuttle)
dim(shuttle)
View(shuttle)
shuttlehw < shuttle[,wind=="head"]
shuttlehw <- shuttle[,wind=="head"]
shuttlehw <- shuttle[shuttle$wind=="head"]
shuttle[,4]
shuttle[,4]=="head"
shuttle[,4]=="tail"
shuttle[shuttle[,4]=="head"]
shuttle[,shuttle[,4]=="head"]
library(dplyr)
shuttlehw <- filter(shuttle,wind=="head")
shuttlehw
shuttletw <- filter(shuttle,wind=="head")
shuttletw
fit <- glm(use ~ wind, data=shuttle)
fit <- glm(use ~ wind, family="binomial", data=shuttle)
fit
glm(use ~ wind, family="binomial",data=shuttlehw)
?glm
fit <- glm(use ~ wind, family="binomial", data=shuttle)
exp(coef(fit))
fit <- glm(use ~ wind - 1, family="binomial", data=shuttle)
exp(coef(fit))
0.7534247/0.777777
fitw <- glm(use ~ wind + magn, family="binomial", data=shuttle)
exp(coef(fitw))
fitinv <- glm(1-use ~ wind, family="binomial", data=shuttle)
shuttle$use
fitinv <- glm(!use ~ wind, family="binomial", data=shuttle)
sapply(shuttle$use,function(x){if(x == "auto"){"noauto"} if(x == "noauto"){"auto"}})
sapply(shuttle$use,function(x){if(x == "auto"){"noauto"}; if(x == "noauto"){"auto"}})
levels(shuttle$use)
invertUse <- function(x){}
invertUse <- function(x){
for(i in shuttle$use){if(shuttle)}
for(i in shuttle$use){
if(shuttle$use[i] == "auto") {"noauto"}
if(shuttle$use[i] == "noauto") {"auto"}
}
for(i in shuttle$use){
if((shuttle$use[i] == "auto") == TRUE) {"noauto"}
if((shuttle$use[i] == "noauto") == TRUE {"auto"}
for(i in shuttle$use){
if((shuttle$use[i] == "auto") == TRUE) {return "noauto"}
for(i in shuttle$use){
shuttle2 <- filter(shuttle,use=="auto")
shuttle3 <- filter(shuttle,use=="noauto")
sapply(shuttle2$use,function(x){shuttle2$use="noauto"})
shuttle3
shuttle3$use
sapply(shuttle3$use,function(x){shuttle3$use="auto"})
shuttle4 <- rbind(shuttle2,shuttle3)
setdiff(shuttle,shuttl4)
setdiff(shuttle,shuttle4)
setdiff(shuttle$use,shuttle4$use)
View(arrange(shuttle, use))
View(arrange(shuttle4, use))
dim(shuttle2)
dim(shuttle3)
dim(shuttle)
dim(shuttle4)
setdiff(shuttle4,shuttle2)
setdiff(shuttle4,shuttle3)
setdiff(shuttle4,shuttle2)
setdiff(shuttle4,shuttle)
(shuttle$use=="auto")$TRUE
(shuttle$use=="auto")
(shuttle$use=="auto")==TRUE
shuttle[(shuttle$use=="auto"),]
shuttle[(shuttle$use=="noauto"),]
s1 <- shuttle[(shuttle$use=="auto"),]
s2 <- shuttle[(shuttle$use=="noauto"),]
dim(s1)
dim(s2)
s3 <- shuttle4[(shuttle4$use=="auto"),]
dim(s3)
#sapply(shuttle3$use,function(x){shuttle3$use="auto"})
head(shuttle3)
shuttle3$use <- sapply(shuttle3$use,function(x){shuttle3$use="auto"})
head(shuttle3)
tail(shuttle3)
head(shuttle4)
head(s1)
tail(s1)
tail(s2)
head(s2)
s1$use <- sapply(s1$use,function(x){s1$use="noauto"})
head(s1)
tail(s1)
s2$use <- sapply(s2$use,function(x){s2$use="auto"})
head(s2)
tail(s2)
dim(s2)
dim(s1)
shuttle4 <- rbind(s1,s2)
setdiff(shuttle,shuttle4)
s1dash <- shuttle4[(shuttle4$use=="auto"),]
s2dash <- shuttle4[(shuttle4$use=="noauto"),]
dim(s1)
dim(s1dash)
dim(s2)
dim(s2dash)
dim(shuttle)
dim(shuttle4)
names(shuttle)
names(shuttle4)
length(s1)
length(s1$use)
length(s2$use)
length(s1dash$use)
length(s2dash$use)
setdiff(shuttle$use,shuttle4$use)
head(shuttle)
head(shuttle4)
tail(shuttle4)
tail(shuttle)
setdiff(s1,s1dash)
setdiff(s2,s2dash)
summarize(group_by(shuttle,use),n())
summarize(group_by(shuttle4,use),n())
summarize(group_by(s1,use),n())
summarize(group_by(s2,use),n())
summarize(group_by(s1dash,use),n())
fitinv <- glm(use ~ wind, family="binomial", data=shuttle4)
fitinv <- glm(-use ~ wind, family="binomial", data=shuttle)
levels(shuttle4$use)
shuttle4$use
shuttle$use
names(shuttle)
names(shuttle4)
shuttle4$use <- as.factor(shuttle4$use)
fitinv <- glm(use ~ wind, family="binomial", data=shuttle4)
fit <- glm(use ~ wind, family="binomial", data=shuttle)
summary(fit)$coef
summary(fitinv)$coef
fit <- glm(use ~ ., family="binomial", data=shuttle)
fit <- glm(use ~ wind + magn, family="binomial", data=shuttle)
fitinv <- glm(use ~ wind + magn, family="binomial", data=shuttle4)
summary(fit)$coef
summary(fitinv)$coef
names(shuttle4)
fit <- glm(use ~ wind + magn + stability, family="binomial", data=shuttle)
fitinv <- glm(use ~ wind + magn + stability, family="binomial", data=shuttle4)
summary(fit)$coef
summary(fitinv)$coef
data(InsectSprays)
ls()
names(InsectSprays)
lodds <- glm(count ~ spray, family="Poisson", data=InsectSprays)
lodds <- glm(count ~ spray, family=Poisson, data=InsectSprays)
lodds <- glm(count ~ spray, family="poisson", data=InsectSprays)
summary(lodds)
exp(coef(lodds))
14.5000000/1.0574713
2.67415/0.05588
2.67415/(2.67415+0.05588)
exp(0.9795314)
14.5/15.56
lodds <- glm(count ~ spray - 1, family="poisson", data=InsectSprays)
coef(lodds)
exp(coef(lodds))
14.500000/15.333333
2.6741486/2.7300291
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y,x)
plot(x, y)
library(lattice)
xyplot(y ~ x, type="l")
xyplot(y ~ x, type="l", lwd=2)
x
y
fitl <- lm(y ~ x)
summary(fitl)
x
y
x[1]
x[1:6]
x1 <- x[1:6]
y1 <- y[1:6]
fitl <- lm(y1 ~ x1)
summary(fitl)
fitted(fitl)
abline(fitted(fit1))
y2 <- fitted(fitl)
y2
class(y2)
y1
y2[1:6]
y2 <- c(4.952857,3.9177143,2.8825714,1.8474286,0.8122857,-0.2228571)
plot(y1 + y2 ~ x1)
plot(y1 + y2 ~ x1, type="l", lwd=2)
xyplot(y + y2 ~ x, type="l", lwd=2)
x
y
y1
y2
knots <- c(0.0)
splineTerms <- sapply(knots,function(knot)(x > knot)*(x-knot))
splineTerms
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y~xMat - 1))
plot(x, y, frame=FALSE, pch=21, bg="lightblue", cex=2)
lines(x, yhat, col="red", lwd=2)
yhat
x
slope <- (4.8827566 - 3.8696891)/1
slope
3.8696891 - 2.8566217
xMat
savehistory("~/R_Practice/RegressionQuizzes.R")
knots <- c(0.0)
splineTerms <- sapply(knots,function(knot)(x > knot)*(x-knot))
splineTerms
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y~xMat - 1))
plot(x, y, frame=FALSE, pch=21, bg="lightblue", cex=2)
lines(x, yhat, col="red", lwd=2)
yhat
x
slope <- (4.8827566 - 3.8696891)/1
slope
3.8696891 - 2.8566217
ls()
rm(list=ls())
ls()
install_github('slidifyLibraries','ramnathv')
library(devtools)
install_github('slidifyLibraries','ramnathv')
install_github('ramnathv/slidifyLibraries')
library(slidify)
install_github('ramnathv/slidify')
library(slidify)
getwd()
runDeck()
install.packages("RGtk2")
shiny::runApp('DevelopingDataProducts')
shiny::runApp('DevelopingDataProducts')
shiny::runApp('DevelopingDataProducts')
shiny::runApp('DevelopingDataProducts')
shiny::runApp('DevelopingDataProducts')
shiny::runApp('DevelopingDataProducts')
shiny::runApp('DevelopingDataProducts')
getwd()
setwd("./DevelopingDataProducts")
shiny::runApp()
shiny::runApp()
library(shinyapps)
getwd()
shiny::runApp()
deployApp()
savehistory("~/R_Practice/DevelopingDataProducts/.Rhistory")
